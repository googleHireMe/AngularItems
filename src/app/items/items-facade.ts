import { Observable } from 'rxjs';
import { Injectable } from '@angular/core';
import { ItemsState } from './state/items.state';
import { tap } from 'rxjs/operators';
import { Item } from './models/item';
import { ItemsApi } from './api/items.api';

@Injectable()
export class ItemsFacade {

  constructor(
    private itemsApi: ItemsApi,
    private itemsState: ItemsState) { }

  isUpdating$(): Observable<boolean> {
    return this.itemsState.isUpdating$();
  }

  getItems$(): Observable<Item[]> {
    // here we just pass the state without any projections
    // it may happen that it is necessary to combine two or more streams and expose to the components
    return this.itemsState.getItems$();
  }

  loadItems(): Observable<Item[]> {
    return this.itemsApi.getItems()
      .pipe(
        tap(p => this.itemsState.setItems(p))
      );
  }

  // optimistic update
  // 1. update UI state
  // 2. call API
  addItem(item: Item) {
    this.itemsState.addItem(item);
    this.itemsApi.createItem(item)
      .subscribe(
        (addedItemWithId: Item) => {
          // success callback - we have id generated by the server, let's update the state
          this.itemsState.updateItemId(item, addedItemWithId)
        },
        (error: any) => {
          // error callback - we need to rollback the state change
          this.itemsState.removeItem(item);
          console.log(error);
        }
      );
  }

  // pessimistic update
  // 1. call API
  // 2. update UI state
  updateItem(category: Item) {
    this.itemsState.setUpdating(true);
    this.itemsApi.updateItem(category)
      .subscribe(
        () => this.itemsState.updateItem(category),
        (error) => console.log(error),
        () => this.itemsState.setUpdating(false)
      );
  }
}